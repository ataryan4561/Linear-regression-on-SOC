-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linear_regression is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of linear_regression is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "linear_regression,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3245494,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=20,HLS_SYN_FF=3209,HLS_SYN_LUT=5142,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3C23D70A : STD_LOGIC_VECTOR (31 downto 0) := "00111100001000111101011100001010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_61 : STD_LOGIC_VECTOR (6 downto 0) := "1100001";
    constant ap_const_lv8_61 : STD_LOGIC_VECTOR (7 downto 0) := "01100001";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_5DC : STD_LOGIC_VECTOR (10 downto 0) := "10111011100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln32_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln65_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln8_reg_1139 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln8_reg_376 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln8_reg_376_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal phi_ln65_reg_628 : STD_LOGIC_VECTOR (1 downto 0);
    signal data1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal data1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal output3_reg_1117 : STD_LOGIC_VECTOR (29 downto 0);
    signal input1_reg_1122 : STD_LOGIC_VECTOR (29 downto 0);
    signal gmem_addr_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln8_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1139_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_789_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln8_reg_1143 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal gmem_addr_1_read_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln11_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal select_ln11_fu_812_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln11_reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln11_1_fu_820_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln11_1_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_fu_838_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln12_reg_1180 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal xor_ln12_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln13_fu_869_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln13_reg_1193 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln13_3_fu_873_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln13_3_reg_1198 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln13_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln13_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_1_fu_885_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln14_fu_911_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_fu_938_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_1227 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln17_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_reg_1232 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln15_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln21_fu_955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_1238 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state21_io : BOOLEAN;
    signal i_2_fu_994_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_1257 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_fu_1006_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_1265 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln35_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_load_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal i_3_fu_1039_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_1304 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln41_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_load_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_load_1_reg_1335 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal icmp_ln65_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state70_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state71_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state71_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln65_fu_1099_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln65_fu_1109_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_reg_1382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state70 : STD_LOGIC;
    signal x_input_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_input_ce0 : STD_LOGIC;
    signal x_input_we0 : STD_LOGIC;
    signal x_input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_input_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_input_ce1 : STD_LOGIC;
    signal x_input_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_ce0 : STD_LOGIC;
    signal data_we0 : STD_LOGIC;
    signal data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_ce1 : STD_LOGIC;
    signal data_we1 : STD_LOGIC;
    signal data1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data1_ce0 : STD_LOGIC;
    signal data1_we0 : STD_LOGIC;
    signal data1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data1_ce1 : STD_LOGIC;
    signal data1_we1 : STD_LOGIC;
    signal y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_ce0 : STD_LOGIC;
    signal y_we0 : STD_LOGIC;
    signal y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln8_phi_fu_380_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_phi_ln11_phi_fu_392_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln11_reg_388 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal phi_ln12_reg_399 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_phi_ln12_1_phi_fu_415_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln12_1_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln13_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_434 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_ln13_1_reg_445 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_ln14_reg_456 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln14_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_467 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal theta_1_2_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_0_2_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_22_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_23_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_0_reg_523 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_25_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_26_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_0_reg_558 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_28_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_29_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_30_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_31_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_0_reg_617 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln8_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_2_fu_900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_968_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_979_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_1028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_1_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_1073_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_1045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_1088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_5_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal theta_0_0_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_1_0_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_639_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal grp_fu_644_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_665_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_fu_669_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_677_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_683_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_850_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln13_1_fu_891_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_2_fu_895_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln15_fu_928_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_fu_949_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_960_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln18_fu_973_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln37_1_fu_1018_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln38_fu_1022_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_1054_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln44_fu_1067_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln43_2_fu_1050_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln45_fu_1082_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_fu_1105_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_639_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_644_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component linear_regressioneOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component linear_regressionfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component linear_regressiong8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component linear_regressionbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component linear_regressioncud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component linear_regression_y IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component linear_regression_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component linear_regression_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    linear_regression_AXILiteS_s_axi_U : component linear_regression_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_r => input_r,
        output_r => output_r);

    linear_regression_gmem_m_axi_U : component linear_regression_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_C2,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_1133,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_2,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => select_ln65_reg_1382,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    x_input_U : component linear_regressionbkb
    generic map (
        DataWidth => 32,
        AddressRange => 194,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x_input_address0,
        ce0 => x_input_ce0,
        we0 => x_input_we0,
        d0 => gmem_addr_1_read_reg_1148,
        q0 => x_input_q0,
        address1 => x_input_address1,
        ce1 => x_input_ce1,
        q1 => x_input_q1);

    data_U : component linear_regressioncud
    generic map (
        DataWidth => 32,
        AddressRange => 194,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_address0,
        ce0 => data_ce0,
        we0 => data_we0,
        d0 => data_d0,
        q0 => data_q0,
        address1 => data_address1,
        ce1 => data_ce1,
        we1 => data_we1,
        d1 => x_input_q0,
        q1 => data_q1);

    data1_U : component linear_regressioncud
    generic map (
        DataWidth => 32,
        AddressRange => 194,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data1_address0,
        ce0 => data1_ce0,
        we0 => data1_we0,
        d0 => data1_d0,
        q0 => data1_q0,
        address1 => data1_address1,
        ce1 => data1_ce1,
        we1 => data1_we1,
        d1 => x_input_q0,
        q1 => data1_q1);

    y_U : component linear_regression_y
    generic map (
        DataWidth => 32,
        AddressRange => 97,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y_address0,
        ce0 => y_ce0,
        we0 => y_we0,
        d0 => y_d0,
        q0 => y_q0);

    linear_regressioneOg_U1 : component linear_regressioneOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_639_p0,
        din1 => grp_fu_639_p1,
        opcode => grp_fu_639_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_639_p2);

    linear_regressioneOg_U2 : component linear_regressioneOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_644_p0,
        din1 => grp_fu_644_p1,
        opcode => grp_fu_644_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_644_p2);

    linear_regressionfYi_U3 : component linear_regressionfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => empty_29_reg_581,
        din1 => reg_720,
        ce => ap_const_logic_1,
        dout => grp_fu_651_p2);

    linear_regressionfYi_U4 : component linear_regressionfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => empty_28_reg_569,
        din1 => reg_726,
        ce => ap_const_logic_1,
        dout => grp_fu_656_p2);

    linear_regressiong8j_U5 : component linear_regressiong8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_665_p0,
        din1 => grp_fu_665_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_665_p2);

    linear_regressiong8j_U6 : component linear_regressiong8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_669_p0,
        din1 => grp_fu_669_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_669_p2);

    linear_regressiong8j_U7 : component linear_regressiong8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_677_p0,
        din1 => grp_fu_677_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_677_p2);

    linear_regressiong8j_U8 : component linear_regressiong8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_683_p0,
        din1 => grp_fu_683_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_683_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state70) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state70))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state70);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_22_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln15_fu_932_p2 = ap_const_lv1_1))) then 
                empty_22_reg_499 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                empty_22_reg_499 <= grp_fu_644_p2;
            end if; 
        end if;
    end process;

    empty_23_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln15_fu_932_p2 = ap_const_lv1_1))) then 
                empty_23_reg_511 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                empty_23_reg_511 <= grp_fu_639_p2;
            end if; 
        end if;
    end process;

    empty_25_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_0))) then 
                empty_25_reg_534 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                empty_25_reg_534 <= grp_fu_644_p2;
            end if; 
        end if;
    end process;

    empty_26_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_0))) then 
                empty_26_reg_546 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                empty_26_reg_546 <= grp_fu_639_p2;
            end if; 
        end if;
    end process;

    empty_28_reg_569_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln35_fu_1000_p2 = ap_const_lv1_1))) then 
                empty_28_reg_569 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                empty_28_reg_569 <= grp_fu_656_p2;
            end if; 
        end if;
    end process;

    empty_29_reg_581_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln35_fu_1000_p2 = ap_const_lv1_1))) then 
                empty_29_reg_581 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                empty_29_reg_581 <= grp_fu_651_p2;
            end if; 
        end if;
    end process;

    empty_30_reg_593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln35_fu_1000_p2 = ap_const_lv1_1))) then 
                empty_30_reg_593 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                empty_30_reg_593 <= grp_fu_644_p2;
            end if; 
        end if;
    end process;

    empty_31_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln35_fu_1000_p2 = ap_const_lv1_1))) then 
                empty_31_reg_605 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                empty_31_reg_605 <= grp_fu_639_p2;
            end if; 
        end if;
    end process;

    i2_0_reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln15_fu_932_p2 = ap_const_lv1_1))) then 
                i2_0_reg_523 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                i2_0_reg_523 <= i_2_reg_1257;
            end if; 
        end if;
    end process;

    i3_0_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_0))) then 
                i3_0_reg_558 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i3_0_reg_558 <= i_1_reg_1265;
            end if; 
        end if;
    end process;

    i4_0_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln35_fu_1000_p2 = ap_const_lv1_1))) then 
                i4_0_reg_617 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i4_0_reg_617 <= i_3_reg_1304;
            end if; 
        end if;
    end process;

    i_0_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln14_fu_922_p2 = ap_const_lv1_1))) then 
                i_0_reg_467 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_0_reg_467 <= i_reg_1227;
            end if; 
        end if;
    end process;

    phi_ln11_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                phi_ln11_reg_388 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_phi_mux_phi_ln11_phi_fu_392_p4 = ap_const_lv1_0))) then 
                phi_ln11_reg_388 <= xor_ln11_fu_806_p2;
            end if; 
        end if;
    end process;

    phi_ln12_1_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 = ap_const_lv1_0))) then 
                phi_ln12_1_reg_411 <= xor_ln12_fu_844_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                phi_ln12_1_reg_411 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    phi_ln12_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_phi_mux_phi_ln11_phi_fu_392_p4 = ap_const_lv1_1))) then 
                phi_ln12_reg_399 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln12_fu_863_p2 = ap_const_lv1_0) and (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 = ap_const_lv1_1))) then 
                phi_ln12_reg_399 <= add_ln12_reg_1180;
            end if; 
        end if;
    end process;

    phi_ln13_1_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln13_fu_905_p2 = ap_const_lv1_0))) then 
                phi_ln13_1_reg_445 <= add_ln13_1_fu_885_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                phi_ln13_1_reg_445 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_ln13_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln12_fu_863_p2 = ap_const_lv1_1) and (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 = ap_const_lv1_1))) then 
                phi_ln13_reg_422 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (phi_ln13_reg_422 = ap_const_lv1_0) and (icmp_ln13_fu_905_p2 = ap_const_lv1_1))) then 
                phi_ln13_reg_422 <= xor_ln13_reg_1203;
            end if; 
        end if;
    end process;

    phi_ln14_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln13_fu_905_p2 = ap_const_lv1_1) and (phi_ln13_reg_422 = ap_const_lv1_1))) then 
                phi_ln14_reg_456 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln14_fu_922_p2 = ap_const_lv1_0))) then 
                phi_ln14_reg_456 <= add_ln14_fu_911_p2;
            end if; 
        end if;
    end process;

    phi_ln65_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_1))) then 
                phi_ln65_reg_628 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln65_fu_1093_p2 = ap_const_lv1_0))) then 
                phi_ln65_reg_628 <= add_ln65_fu_1099_p2;
            end if; 
        end if;
    end process;

    phi_ln8_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1139 = ap_const_lv1_0))) then 
                phi_ln8_reg_376 <= add_ln8_reg_1143;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln8_reg_376 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln12_fu_863_p2 = ap_const_lv1_1) and (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 = ap_const_lv1_1))) then 
                phi_mul_reg_434 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (phi_ln13_reg_422 = ap_const_lv1_0) and (icmp_ln13_fu_905_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_434 <= add_ln13_3_reg_1198;
            end if; 
        end if;
    end process;

    theta_0_2_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln15_fu_932_p2 = ap_const_lv1_1))) then 
                theta_0_2_reg_489 <= select_ln11_1_reg_1175;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                theta_0_2_reg_489 <= grp_fu_639_p2;
            end if; 
        end if;
    end process;

    theta_1_2_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln15_fu_932_p2 = ap_const_lv1_1))) then 
                theta_1_2_reg_479 <= select_ln11_reg_1170;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                theta_1_2_reg_479 <= grp_fu_644_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln12_reg_1180 <= add_ln12_fu_838_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln13_3_reg_1198 <= add_ln13_3_fu_873_p2;
                xor_ln13_reg_1203 <= xor_ln13_fu_879_p2;
                    zext_ln13_reg_1193(6 downto 0) <= zext_ln13_fu_869_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln8_reg_1143 <= add_ln8_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                data_load_1_reg_1335 <= data_q0;
                data_load_reg_1329 <= data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1139 = ap_const_lv1_0))) then
                gmem_addr_1_read_reg_1148 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    gmem_addr_reg_1133(29 downto 0) <= empty_fu_774_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_1_reg_1265 <= i_1_fu_1006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                i_2_reg_1257 <= i_2_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                i_3_reg_1304 <= i_3_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_reg_1227 <= i_fu_938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln65_reg_1373 <= icmp_ln65_fu_1093_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln8_reg_1139 <= icmp_ln8_fu_783_p2;
                icmp_ln8_reg_1139_pp0_iter1_reg <= icmp_ln8_reg_1139;
                phi_ln8_reg_376_pp0_iter1_reg <= phi_ln8_reg_376;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                input1_reg_1122 <= input_r(31 downto 2);
                output3_reg_1117 <= output_r(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_693 <= data1_q1;
                reg_699 <= data1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_706 <= grp_fu_665_p2;
                reg_713 <= grp_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_720 <= grp_fu_677_p2;
                reg_726 <= grp_fu_683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51))) then
                reg_732 <= grp_fu_639_p2;
                reg_738 <= grp_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                select_ln11_1_reg_1175 <= select_ln11_1_fu_820_p3;
                select_ln11_reg_1170 <= select_ln11_fu_812_p3;
                theta_0_0_fu_162 <= select_ln11_1_fu_820_p3;
                theta_1_0_fu_166 <= select_ln11_fu_812_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln65_fu_1093_p2 = ap_const_lv1_0))) then
                select_ln65_reg_1382 <= select_ln65_fu_1109_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                y_load_reg_1285 <= y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln15_fu_932_p2 = ap_const_lv1_0))) then
                    zext_ln17_reg_1232(6 downto 0) <= zext_ln17_fu_944_p1(6 downto 0);
                    zext_ln21_reg_1238(7 downto 0) <= zext_ln21_fu_955_p1(7 downto 0);
            end if;
        end if;
    end process;
    gmem_addr_reg_1133(31 downto 30) <= "00";
    zext_ln13_reg_1193(7) <= '0';
    zext_ln17_reg_1232(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_1238(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state21, icmp_ln32_fu_988_p2, ap_CS_fsm_state76, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, gmem_ARREADY, gmem_BVALID, icmp_ln8_fu_783_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, icmp_ln15_fu_932_p2, ap_block_state21_io, ap_CS_fsm_state22, icmp_ln35_fu_1000_p2, ap_CS_fsm_state33, icmp_ln41_fu_1033_p2, icmp_ln65_fu_1093_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_phi_mux_phi_ln11_phi_fu_392_p4, ap_phi_mux_phi_ln12_1_phi_fu_415_p4, icmp_ln12_fu_863_p2, phi_ln13_reg_422, icmp_ln13_fu_905_p2, icmp_ln14_fu_922_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln8_fu_783_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln8_fu_783_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_phi_mux_phi_ln11_phi_fu_392_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln12_fu_863_p2 = ap_const_lv1_1) and (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln12_fu_863_p2 = ap_const_lv1_0) and (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln13_fu_905_p2 = ap_const_lv1_1) and (phi_ln13_reg_422 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (phi_ln13_reg_422 = ap_const_lv1_0) and (icmp_ln13_fu_905_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln14_fu_922_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln15_fu_932_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln35_fu_1000_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln41_fu_1033_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln65_fu_1093_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln65_fu_1093_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln12_fu_838_p2 <= std_logic_vector(unsigned(phi_ln12_reg_399) + unsigned(ap_const_lv7_1));
    add_ln13_1_fu_885_p2 <= std_logic_vector(unsigned(phi_ln13_1_reg_445) + unsigned(ap_const_lv7_1));
    add_ln13_2_fu_895_p2 <= std_logic_vector(unsigned(zext_ln13_reg_1193) + unsigned(zext_ln13_1_fu_891_p1));
    add_ln13_3_fu_873_p2 <= std_logic_vector(unsigned(phi_mul_reg_434) + unsigned(ap_const_lv7_61));
    add_ln14_fu_911_p2 <= std_logic_vector(unsigned(phi_ln14_reg_456) + unsigned(ap_const_lv7_1));
    add_ln21_fu_949_p2 <= std_logic_vector(unsigned(zext_ln15_fu_928_p1) + unsigned(ap_const_lv8_61));
    add_ln38_fu_1022_p2 <= std_logic_vector(unsigned(zext_ln37_1_fu_1018_p1) + unsigned(ap_const_lv8_61));
    add_ln45_fu_1082_p2 <= std_logic_vector(unsigned(zext_ln43_2_fu_1050_p1) + unsigned(ap_const_lv8_61));
    add_ln65_fu_1099_p2 <= std_logic_vector(unsigned(phi_ln65_reg_628) + unsigned(ap_const_lv2_1));
    add_ln8_fu_789_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln8_phi_fu_380_p4) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(67);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(32);
    ap_CS_fsm_state38 <= ap_CS_fsm(35);
    ap_CS_fsm_state39 <= ap_CS_fsm(36);
    ap_CS_fsm_state43 <= ap_CS_fsm(40);
    ap_CS_fsm_state46 <= ap_CS_fsm(43);
    ap_CS_fsm_state47 <= ap_CS_fsm(44);
    ap_CS_fsm_state51 <= ap_CS_fsm(48);
    ap_CS_fsm_state52 <= ap_CS_fsm(49);
    ap_CS_fsm_state56 <= ap_CS_fsm(53);
    ap_CS_fsm_state57 <= ap_CS_fsm(54);
    ap_CS_fsm_state60 <= ap_CS_fsm(57);
    ap_CS_fsm_state61 <= ap_CS_fsm(58);
    ap_CS_fsm_state64 <= ap_CS_fsm(61);
    ap_CS_fsm_state65 <= ap_CS_fsm(62);
    ap_CS_fsm_state69 <= ap_CS_fsm(66);
    ap_CS_fsm_state76 <= ap_CS_fsm(72);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln8_reg_1139, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln8_reg_1139 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln8_reg_1139, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln8_reg_1139 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state71_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state71_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state71_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state71_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln8_reg_1139, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln8_reg_1139 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_io_assign_proc : process(icmp_ln32_fu_988_p2, gmem_AWREADY)
    begin
                ap_block_state21_io <= ((gmem_AWREADY = ap_const_logic_0) and (icmp_ln32_fu_988_p2 = ap_const_lv1_1));
    end process;

        ap_block_state70_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state71_io_assign_proc : process(icmp_ln65_reg_1373, gmem_WREADY)
    begin
                ap_block_state71_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln65_reg_1373 = ap_const_lv1_0));
    end process;

        ap_block_state71_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln8_fu_783_p2)
    begin
        if ((icmp_ln8_fu_783_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state70_assign_proc : process(icmp_ln65_fu_1093_p2)
    begin
        if ((icmp_ln65_fu_1093_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state70 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state70 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state76, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_phi_ln11_phi_fu_392_p4 <= phi_ln11_reg_388;
    ap_phi_mux_phi_ln12_1_phi_fu_415_p4 <= phi_ln12_1_reg_411;

    ap_phi_mux_phi_ln8_phi_fu_380_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln8_reg_1139, phi_ln8_reg_376, add_ln8_reg_1143)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln8_reg_1139 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln8_phi_fu_380_p4 <= add_ln8_reg_1143;
        else 
            ap_phi_mux_phi_ln8_phi_fu_380_p4 <= phi_ln8_reg_376;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state76, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    data1_address0_assign_proc : process(ap_CS_fsm_state17, zext_ln17_reg_1232, ap_CS_fsm_state22, ap_CS_fsm_state33, ap_CS_fsm_state20, zext_ln13_2_fu_900_p1, zext_ln38_fu_1028_p1, zext_ln45_fu_1088_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            data1_address0 <= zext_ln45_fu_1088_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            data1_address0 <= zext_ln38_fu_1028_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data1_address0 <= zext_ln17_reg_1232(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data1_address0 <= zext_ln13_2_fu_900_p1(8 - 1 downto 0);
        else 
            data1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    data1_address1_assign_proc : process(zext_ln21_reg_1238, ap_CS_fsm_state22, ap_CS_fsm_state33, ap_CS_fsm_state20, zext_ln37_fu_1012_p1, zext_ln43_fu_1045_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            data1_address1 <= zext_ln43_fu_1045_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            data1_address1 <= zext_ln37_fu_1012_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data1_address1 <= zext_ln21_reg_1238(8 - 1 downto 0);
        else 
            data1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    data1_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state33, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            data1_ce0 <= ap_const_logic_1;
        else 
            data1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data1_ce1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state33, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            data1_ce1 <= ap_const_logic_1;
        else 
            data1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data1_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data1_d0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data1_d0 <= ap_const_lv32_0;
        else 
            data1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data1_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            data1_we0 <= ap_const_logic_1;
        else 
            data1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data1_we1_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data1_we1 <= ap_const_logic_1;
        else 
            data1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state33, ap_CS_fsm_state20, zext_ln12_fu_858_p1, zext_ln17_1_fu_968_p1, tmp_27_fu_1073_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            data_address0 <= tmp_27_fu_1073_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_address0 <= zext_ln17_1_fu_968_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_address0 <= zext_ln12_fu_858_p1(8 - 1 downto 0);
        else 
            data_address0 <= "XXXXXXXX";
        end if; 
    end process;


    data_address1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state20, tmp_25_fu_979_p3, zext_ln43_1_fu_1062_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            data_address1 <= zext_ln43_1_fu_1062_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_address1 <= tmp_25_fu_979_p3(8 - 1 downto 0);
        else 
            data_address1 <= "XXXXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state33, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_ce1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            data_ce1 <= ap_const_logic_1;
        else 
            data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_d0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_d0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_d0 <= ap_const_lv32_0;
        else 
            data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_we1_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_we1 <= ap_const_logic_1;
        else 
            data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_5_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_reg_1122),64));
    empty_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output3_reg_1117),64));
    gmem_ARADDR <= empty_5_fu_764_p1(32 - 1 downto 0);

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_fu_988_p2, ap_block_state21_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_1))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state76, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln8_reg_1139, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1139 = ap_const_lv1_0))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln65_reg_1373, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln65_reg_1373 = ap_const_lv1_0))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state21, icmp_ln32_fu_988_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln32_fu_988_p2 = ap_const_lv1_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln8_reg_1139)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln8_reg_1139 = ap_const_lv1_0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln65_reg_1373)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln65_reg_1373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_639_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_fu_639_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_639_opcode <= ap_const_lv2_0;
        else 
            grp_fu_639_opcode <= "XX";
        end if; 
    end process;


    grp_fu_639_p0_assign_proc : process(reg_706, reg_732, empty_23_reg_511, empty_26_reg_546, empty_31_reg_605, ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_639_p0 <= empty_23_reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_639_p0 <= reg_732;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_639_p0 <= reg_706;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_639_p0 <= empty_31_reg_605;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_639_p0 <= empty_26_reg_546;
        else 
            grp_fu_639_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_639_p1_assign_proc : process(reg_706, reg_713, empty_26_reg_546, ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_639_p1 <= empty_26_reg_546;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_639_p1 <= reg_713;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_639_p1 <= reg_706;
        else 
            grp_fu_639_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_644_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_fu_644_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_644_opcode <= ap_const_lv2_0;
        else 
            grp_fu_644_opcode <= "XX";
        end if; 
    end process;


    grp_fu_644_p0_assign_proc : process(reg_720, reg_738, empty_22_reg_499, empty_25_reg_534, empty_30_reg_593, ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_644_p0 <= empty_22_reg_499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_644_p0 <= reg_738;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_644_p0 <= reg_720;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_644_p0 <= empty_30_reg_593;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_644_p0 <= empty_25_reg_534;
        else 
            grp_fu_644_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_644_p1_assign_proc : process(reg_713, reg_726, empty_25_reg_534, ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_644_p1 <= empty_25_reg_534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_644_p1 <= reg_726;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_644_p1 <= reg_713;
        else 
            grp_fu_644_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_665_p0_assign_proc : process(reg_693, reg_706, reg_732, ap_CS_fsm_state33, empty_31_reg_605, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state57, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_665_p0 <= reg_706;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_665_p0 <= reg_732;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_665_p0 <= empty_31_reg_605;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_665_p0 <= reg_693;
        else 
            grp_fu_665_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_665_p1_assign_proc : process(y_load_reg_1285, ap_CS_fsm_state33, data_load_reg_1329, empty_23_reg_511, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state57, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_665_p1 <= ap_const_lv32_3C23D70A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_665_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_665_p1 <= data_load_reg_1329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_665_p1 <= empty_23_reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_665_p1 <= y_load_reg_1285;
        else 
            grp_fu_665_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_669_p0_assign_proc : process(reg_693, reg_699, reg_713, reg_738, ap_CS_fsm_state33, empty_30_reg_593, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state57, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_669_p0 <= reg_713;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_669_p0 <= reg_738;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_669_p0 <= reg_693;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_669_p0 <= empty_30_reg_593;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_669_p0 <= reg_699;
        else 
            grp_fu_669_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_669_p1_assign_proc : process(y_load_reg_1285, ap_CS_fsm_state33, data_load_1_reg_1335, empty_22_reg_499, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state57, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_669_p1 <= ap_const_lv32_3C23D70A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_669_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_669_p1 <= data_load_1_reg_1335;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_669_p1 <= empty_22_reg_499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_669_p1 <= y_load_reg_1285;
        else 
            grp_fu_669_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_677_p0_assign_proc : process(reg_699, ap_CS_fsm_state33, empty_29_reg_581, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_677_p0 <= reg_699;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_677_p0 <= empty_29_reg_581;
        else 
            grp_fu_677_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_677_p1_assign_proc : process(ap_CS_fsm_state33, data_load_reg_1329, empty_23_reg_511, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_677_p1 <= data_load_reg_1329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_677_p1 <= empty_23_reg_511;
        else 
            grp_fu_677_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_683_p0_assign_proc : process(reg_699, ap_CS_fsm_state33, empty_28_reg_569, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_683_p0 <= reg_699;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_683_p0 <= empty_28_reg_569;
        else 
            grp_fu_683_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_683_p1_assign_proc : process(ap_CS_fsm_state33, data_load_1_reg_1335, empty_22_reg_499, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_683_p1 <= data_load_1_reg_1335;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_683_p1 <= empty_22_reg_499;
        else 
            grp_fu_683_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_1006_p2 <= std_logic_vector(unsigned(i3_0_reg_558) + unsigned(ap_const_lv7_1));
    i_2_fu_994_p2 <= std_logic_vector(unsigned(i2_0_reg_523) + unsigned(ap_const_lv11_1));
    i_3_fu_1039_p2 <= std_logic_vector(unsigned(i4_0_reg_617) + unsigned(ap_const_lv7_1));
    i_fu_938_p2 <= std_logic_vector(unsigned(i_0_reg_467) + unsigned(ap_const_lv7_1));
    icmp_ln12_fu_863_p2 <= "1" when (phi_ln12_reg_399 = ap_const_lv7_60) else "0";
    icmp_ln13_fu_905_p2 <= "1" when (phi_ln13_1_reg_445 = ap_const_lv7_60) else "0";
    icmp_ln14_fu_922_p2 <= "1" when (phi_ln14_reg_456 = ap_const_lv7_60) else "0";
    icmp_ln15_fu_932_p2 <= "1" when (i_0_reg_467 = ap_const_lv7_61) else "0";
    icmp_ln32_fu_988_p2 <= "1" when (i2_0_reg_523 = ap_const_lv11_5DC) else "0";
    icmp_ln35_fu_1000_p2 <= "1" when (i3_0_reg_558 = ap_const_lv7_61) else "0";
    icmp_ln41_fu_1033_p2 <= "1" when (i4_0_reg_617 = ap_const_lv7_61) else "0";
    icmp_ln65_fu_1093_p2 <= "1" when (phi_ln65_reg_628 = ap_const_lv2_2) else "0";
    icmp_ln8_fu_783_p2 <= "1" when (ap_phi_mux_phi_ln8_phi_fu_380_p4 = ap_const_lv8_C2) else "0";
    or_ln18_fu_973_p2 <= (tmp_24_fu_960_p3 or ap_const_lv8_1);
    or_ln44_fu_1067_p2 <= (tmp_26_fu_1054_p3 or ap_const_lv8_1);
    select_ln11_1_fu_820_p3 <= 
        theta_0_0_fu_162 when (phi_ln11_reg_388(0) = '1') else 
        ap_const_lv32_0;
    select_ln11_fu_812_p3 <= 
        ap_const_lv32_0 when (phi_ln11_reg_388(0) = '1') else 
        theta_1_0_fu_166;
    select_ln65_fu_1109_p3 <= 
        theta_1_2_reg_479 when (trunc_ln65_fu_1105_p1(0) = '1') else 
        theta_0_2_reg_489;
    tmp_24_fu_960_p3 <= (i_0_reg_467 & ap_const_lv1_0);
    tmp_25_fu_979_p3 <= (ap_const_lv56_0 & or_ln18_fu_973_p2);
    tmp_26_fu_1054_p3 <= (i4_0_reg_617 & ap_const_lv1_0);
    tmp_27_fu_1073_p3 <= (ap_const_lv56_0 & or_ln44_fu_1067_p2);
    tmp_fu_850_p3 <= (phi_ln12_reg_399 & phi_ln12_1_reg_411);
    trunc_ln65_fu_1105_p1 <= phi_ln65_reg_628(1 - 1 downto 0);

    x_input_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state19, zext_ln17_fu_944_p1, ap_enable_reg_pp0_iter2, zext_ln8_fu_795_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x_input_address0 <= zext_ln17_fu_944_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_input_address0 <= zext_ln8_fu_795_p1(8 - 1 downto 0);
        else 
            x_input_address0 <= "XXXXXXXX";
        end if; 
    end process;

    x_input_address1 <= zext_ln21_fu_955_p1(8 - 1 downto 0);

    x_input_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state19, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            x_input_ce0 <= ap_const_logic_1;
        else 
            x_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_input_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x_input_ce1 <= ap_const_logic_1;
        else 
            x_input_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_input_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln8_reg_1139_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln8_reg_1139_pp0_iter1_reg = ap_const_lv1_0))) then 
            x_input_we0 <= ap_const_logic_1;
        else 
            x_input_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln11_fu_806_p2 <= (phi_ln11_reg_388 xor ap_const_lv1_1);
    xor_ln12_fu_844_p2 <= (phi_ln12_1_reg_411 xor ap_const_lv1_1);
    xor_ln13_fu_879_p2 <= (phi_ln13_reg_422 xor ap_const_lv1_1);

    y_address0_assign_proc : process(ap_CS_fsm_state18, zext_ln17_reg_1232, ap_CS_fsm_state22, ap_CS_fsm_state20, zext_ln14_fu_917_p1, zext_ln37_fu_1012_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            y_address0 <= zext_ln37_fu_1012_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            y_address0 <= zext_ln17_reg_1232(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            y_address0 <= zext_ln14_fu_917_p1(7 - 1 downto 0);
        else 
            y_address0 <= "XXXXXXX";
        end if; 
    end process;


    y_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_d0_assign_proc : process(ap_CS_fsm_state18, x_input_q1, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            y_d0 <= x_input_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            y_d0 <= ap_const_lv32_0;
        else 
            y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_850_p3),64));
    zext_ln13_1_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln13_1_reg_445),8));
    zext_ln13_2_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_2_fu_895_p2),64));
    zext_ln13_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_434),8));
    zext_ln14_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln14_reg_456),64));
    zext_ln15_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_467),8));
    zext_ln17_1_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_960_p3),64));
    zext_ln17_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_467),64));
    zext_ln21_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_949_p2),64));
    zext_ln37_1_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_558),8));
    zext_ln37_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_558),64));
    zext_ln38_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_fu_1022_p2),64));
    zext_ln43_1_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1054_p3),64));
    zext_ln43_2_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_617),8));
    zext_ln43_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_617),64));
    zext_ln45_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_1082_p2),64));
    zext_ln8_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln8_reg_376_pp0_iter1_reg),64));
end behav;
