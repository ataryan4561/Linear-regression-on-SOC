// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="linear_regression,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3245494,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=20,HLS_SYN_FF=3209,HLS_SYN_LUT=5142,HLS_VERSION=2019_1}" *)

module linear_regression (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_state2 = 73'd2;
parameter    ap_ST_fsm_state3 = 73'd4;
parameter    ap_ST_fsm_state4 = 73'd8;
parameter    ap_ST_fsm_state5 = 73'd16;
parameter    ap_ST_fsm_state6 = 73'd32;
parameter    ap_ST_fsm_state7 = 73'd64;
parameter    ap_ST_fsm_state8 = 73'd128;
parameter    ap_ST_fsm_pp0_stage0 = 73'd256;
parameter    ap_ST_fsm_state12 = 73'd512;
parameter    ap_ST_fsm_state13 = 73'd1024;
parameter    ap_ST_fsm_state14 = 73'd2048;
parameter    ap_ST_fsm_state15 = 73'd4096;
parameter    ap_ST_fsm_state16 = 73'd8192;
parameter    ap_ST_fsm_state17 = 73'd16384;
parameter    ap_ST_fsm_state18 = 73'd32768;
parameter    ap_ST_fsm_state19 = 73'd65536;
parameter    ap_ST_fsm_state20 = 73'd131072;
parameter    ap_ST_fsm_state21 = 73'd262144;
parameter    ap_ST_fsm_state22 = 73'd524288;
parameter    ap_ST_fsm_state23 = 73'd1048576;
parameter    ap_ST_fsm_state24 = 73'd2097152;
parameter    ap_ST_fsm_state25 = 73'd4194304;
parameter    ap_ST_fsm_state26 = 73'd8388608;
parameter    ap_ST_fsm_state27 = 73'd16777216;
parameter    ap_ST_fsm_state28 = 73'd33554432;
parameter    ap_ST_fsm_state29 = 73'd67108864;
parameter    ap_ST_fsm_state30 = 73'd134217728;
parameter    ap_ST_fsm_state31 = 73'd268435456;
parameter    ap_ST_fsm_state32 = 73'd536870912;
parameter    ap_ST_fsm_state33 = 73'd1073741824;
parameter    ap_ST_fsm_state34 = 73'd2147483648;
parameter    ap_ST_fsm_state35 = 73'd4294967296;
parameter    ap_ST_fsm_state36 = 73'd8589934592;
parameter    ap_ST_fsm_state37 = 73'd17179869184;
parameter    ap_ST_fsm_state38 = 73'd34359738368;
parameter    ap_ST_fsm_state39 = 73'd68719476736;
parameter    ap_ST_fsm_state40 = 73'd137438953472;
parameter    ap_ST_fsm_state41 = 73'd274877906944;
parameter    ap_ST_fsm_state42 = 73'd549755813888;
parameter    ap_ST_fsm_state43 = 73'd1099511627776;
parameter    ap_ST_fsm_state44 = 73'd2199023255552;
parameter    ap_ST_fsm_state45 = 73'd4398046511104;
parameter    ap_ST_fsm_state46 = 73'd8796093022208;
parameter    ap_ST_fsm_state47 = 73'd17592186044416;
parameter    ap_ST_fsm_state48 = 73'd35184372088832;
parameter    ap_ST_fsm_state49 = 73'd70368744177664;
parameter    ap_ST_fsm_state50 = 73'd140737488355328;
parameter    ap_ST_fsm_state51 = 73'd281474976710656;
parameter    ap_ST_fsm_state52 = 73'd562949953421312;
parameter    ap_ST_fsm_state53 = 73'd1125899906842624;
parameter    ap_ST_fsm_state54 = 73'd2251799813685248;
parameter    ap_ST_fsm_state55 = 73'd4503599627370496;
parameter    ap_ST_fsm_state56 = 73'd9007199254740992;
parameter    ap_ST_fsm_state57 = 73'd18014398509481984;
parameter    ap_ST_fsm_state58 = 73'd36028797018963968;
parameter    ap_ST_fsm_state59 = 73'd72057594037927936;
parameter    ap_ST_fsm_state60 = 73'd144115188075855872;
parameter    ap_ST_fsm_state61 = 73'd288230376151711744;
parameter    ap_ST_fsm_state62 = 73'd576460752303423488;
parameter    ap_ST_fsm_state63 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 73'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 73'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 73'd73786976294838206464;
parameter    ap_ST_fsm_pp1_stage0 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state72 = 73'd295147905179352825856;
parameter    ap_ST_fsm_state73 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state74 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_state75 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state76 = 73'd4722366482869645213696;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] output_r;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln32_fu_988_p2;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln65_reg_1373;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state76;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln8_reg_1139;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [7:0] phi_ln8_reg_376;
reg   [7:0] phi_ln8_reg_376_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [1:0] phi_ln65_reg_628;
wire   [31:0] data1_q1;
reg   [31:0] reg_693;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state34;
wire   [31:0] data1_q0;
reg   [31:0] reg_699;
wire   [31:0] grp_fu_665_p2;
reg   [31:0] reg_706;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state64;
wire   [31:0] grp_fu_669_p2;
reg   [31:0] reg_713;
wire   [31:0] grp_fu_677_p2;
reg   [31:0] reg_720;
wire   [31:0] grp_fu_683_p2;
reg   [31:0] reg_726;
wire   [31:0] grp_fu_639_p2;
reg   [31:0] reg_732;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state56;
wire   [31:0] grp_fu_644_p2;
reg   [31:0] reg_738;
reg   [29:0] output3_reg_1117;
reg   [29:0] input1_reg_1122;
reg   [31:0] gmem_addr_reg_1133;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln8_fu_783_p2;
reg   [0:0] icmp_ln8_reg_1139_pp0_iter1_reg;
wire   [7:0] add_ln8_fu_789_p2;
reg   [7:0] add_ln8_reg_1143;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] gmem_addr_1_read_reg_1148;
wire   [0:0] xor_ln11_fu_806_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] select_ln11_fu_812_p3;
reg   [31:0] select_ln11_reg_1170;
wire   [31:0] select_ln11_1_fu_820_p3;
reg   [31:0] select_ln11_1_reg_1175;
wire   [6:0] add_ln12_fu_838_p2;
reg   [6:0] add_ln12_reg_1180;
wire    ap_CS_fsm_state14;
wire   [0:0] xor_ln12_fu_844_p2;
wire    ap_CS_fsm_state15;
wire   [7:0] zext_ln13_fu_869_p1;
reg   [7:0] zext_ln13_reg_1193;
wire    ap_CS_fsm_state16;
wire   [6:0] add_ln13_3_fu_873_p2;
reg   [6:0] add_ln13_3_reg_1198;
wire   [0:0] xor_ln13_fu_879_p2;
reg   [0:0] xor_ln13_reg_1203;
wire   [6:0] add_ln13_1_fu_885_p2;
wire    ap_CS_fsm_state17;
wire   [6:0] add_ln14_fu_911_p2;
wire    ap_CS_fsm_state18;
wire   [6:0] i_fu_938_p2;
reg   [6:0] i_reg_1227;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln17_fu_944_p1;
reg   [63:0] zext_ln17_reg_1232;
wire   [0:0] icmp_ln15_fu_932_p2;
wire   [63:0] zext_ln21_fu_955_p1;
reg   [63:0] zext_ln21_reg_1238;
reg    ap_block_state21_io;
wire   [10:0] i_2_fu_994_p2;
reg   [10:0] i_2_reg_1257;
wire   [6:0] i_1_fu_1006_p2;
reg   [6:0] i_1_reg_1265;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln35_fu_1000_p2;
wire   [31:0] y_q0;
reg   [31:0] y_load_reg_1285;
wire    ap_CS_fsm_state32;
wire   [6:0] i_3_fu_1039_p2;
reg   [6:0] i_3_reg_1304;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln41_fu_1033_p2;
wire   [31:0] data_q1;
reg   [31:0] data_load_reg_1329;
wire   [31:0] data_q0;
reg   [31:0] data_load_1_reg_1335;
wire    ap_CS_fsm_state43;
wire   [31:0] grp_fu_651_p2;
wire   [31:0] grp_fu_656_p2;
wire    ap_CS_fsm_state69;
wire   [0:0] icmp_ln65_fu_1093_p2;
wire    ap_block_state70_pp1_stage0_iter0;
wire    ap_block_state71_pp1_stage0_iter1;
reg    ap_block_state71_io;
reg    ap_block_pp1_stage0_11001;
wire   [1:0] add_ln65_fu_1099_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] select_ln65_fu_1109_p3;
reg   [31:0] select_ln65_reg_1382;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state70;
reg   [7:0] x_input_address0;
reg    x_input_ce0;
reg    x_input_we0;
wire   [31:0] x_input_q0;
wire   [7:0] x_input_address1;
reg    x_input_ce1;
wire   [31:0] x_input_q1;
reg   [7:0] data_address0;
reg    data_ce0;
reg    data_we0;
reg   [31:0] data_d0;
reg   [7:0] data_address1;
reg    data_ce1;
reg    data_we1;
reg   [7:0] data1_address0;
reg    data1_ce0;
reg    data1_we0;
reg   [31:0] data1_d0;
reg   [7:0] data1_address1;
reg    data1_ce1;
reg    data1_we1;
reg   [6:0] y_address0;
reg    y_ce0;
reg    y_we0;
reg   [31:0] y_d0;
reg   [7:0] ap_phi_mux_phi_ln8_phi_fu_380_p4;
wire   [0:0] ap_phi_mux_phi_ln11_phi_fu_392_p4;
reg   [0:0] phi_ln11_reg_388;
wire    ap_CS_fsm_state12;
reg   [6:0] phi_ln12_reg_399;
wire   [0:0] ap_phi_mux_phi_ln12_1_phi_fu_415_p4;
wire   [0:0] icmp_ln12_fu_863_p2;
reg   [0:0] phi_ln12_1_reg_411;
reg   [0:0] phi_ln13_reg_422;
wire   [0:0] icmp_ln13_fu_905_p2;
reg   [6:0] phi_mul_reg_434;
reg   [6:0] phi_ln13_1_reg_445;
reg   [6:0] phi_ln14_reg_456;
wire   [0:0] icmp_ln14_fu_922_p2;
reg   [6:0] i_0_reg_467;
wire    ap_CS_fsm_state20;
reg   [31:0] theta_1_2_reg_479;
reg   [31:0] theta_0_2_reg_489;
reg   [31:0] empty_22_reg_499;
reg   [31:0] empty_23_reg_511;
reg   [10:0] i2_0_reg_523;
reg   [31:0] empty_25_reg_534;
reg   [31:0] empty_26_reg_546;
reg   [6:0] i3_0_reg_558;
reg   [31:0] empty_28_reg_569;
reg   [31:0] empty_29_reg_581;
reg   [31:0] empty_30_reg_593;
reg   [31:0] empty_31_reg_605;
reg   [6:0] i4_0_reg_617;
wire   [63:0] zext_ln8_fu_795_p1;
wire   [63:0] zext_ln12_fu_858_p1;
wire   [63:0] zext_ln13_2_fu_900_p1;
wire   [63:0] zext_ln14_fu_917_p1;
wire   [63:0] zext_ln17_1_fu_968_p1;
wire   [63:0] tmp_25_fu_979_p3;
wire   [63:0] zext_ln37_fu_1012_p1;
wire   [63:0] zext_ln38_fu_1028_p1;
wire   [63:0] zext_ln43_1_fu_1062_p1;
wire   [63:0] tmp_27_fu_1073_p3;
wire   [63:0] zext_ln43_fu_1045_p1;
wire   [63:0] zext_ln45_fu_1088_p1;
wire   [63:0] empty_5_fu_764_p1;
wire   [63:0] empty_fu_774_p1;
wire    ap_block_pp1_stage0_01001;
reg   [31:0] theta_0_0_fu_162;
reg   [31:0] theta_1_0_fu_166;
reg   [31:0] grp_fu_639_p0;
reg   [31:0] grp_fu_639_p1;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state65;
reg   [31:0] grp_fu_644_p0;
reg   [31:0] grp_fu_644_p1;
reg   [31:0] grp_fu_665_p0;
reg   [31:0] grp_fu_665_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state61;
reg   [31:0] grp_fu_669_p0;
reg   [31:0] grp_fu_669_p1;
reg   [31:0] grp_fu_677_p0;
reg   [31:0] grp_fu_677_p1;
reg   [31:0] grp_fu_683_p0;
reg   [31:0] grp_fu_683_p1;
wire   [7:0] tmp_fu_850_p3;
wire   [7:0] zext_ln13_1_fu_891_p1;
wire   [7:0] add_ln13_2_fu_895_p2;
wire   [7:0] zext_ln15_fu_928_p1;
wire   [7:0] add_ln21_fu_949_p2;
wire   [7:0] tmp_24_fu_960_p3;
wire   [7:0] or_ln18_fu_973_p2;
wire   [7:0] zext_ln37_1_fu_1018_p1;
wire   [7:0] add_ln38_fu_1022_p2;
wire   [7:0] tmp_26_fu_1054_p3;
wire   [7:0] or_ln44_fu_1067_p2;
wire   [7:0] zext_ln43_2_fu_1050_p1;
wire   [7:0] add_ln45_fu_1082_p2;
wire   [0:0] trunc_ln65_fu_1105_p1;
reg   [1:0] grp_fu_639_opcode;
reg   [1:0] grp_fu_644_opcode;
reg   [72:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 73'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

linear_regression_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
linear_regression_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_r(input_r),
    .output_r(output_r)
);

linear_regression_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
linear_regression_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd194),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_1133),
    .I_AWID(1'd0),
    .I_AWLEN(32'd2),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(select_ln65_reg_1382),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

linear_regressionbkb #(
    .DataWidth( 32 ),
    .AddressRange( 194 ),
    .AddressWidth( 8 ))
x_input_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_input_address0),
    .ce0(x_input_ce0),
    .we0(x_input_we0),
    .d0(gmem_addr_1_read_reg_1148),
    .q0(x_input_q0),
    .address1(x_input_address1),
    .ce1(x_input_ce1),
    .q1(x_input_q1)
);

linear_regressioncud #(
    .DataWidth( 32 ),
    .AddressRange( 194 ),
    .AddressWidth( 8 ))
data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_address0),
    .ce0(data_ce0),
    .we0(data_we0),
    .d0(data_d0),
    .q0(data_q0),
    .address1(data_address1),
    .ce1(data_ce1),
    .we1(data_we1),
    .d1(x_input_q0),
    .q1(data_q1)
);

linear_regressioncud #(
    .DataWidth( 32 ),
    .AddressRange( 194 ),
    .AddressWidth( 8 ))
data1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data1_address0),
    .ce0(data1_ce0),
    .we0(data1_we0),
    .d0(data1_d0),
    .q0(data1_q0),
    .address1(data1_address1),
    .ce1(data1_ce1),
    .we1(data1_we1),
    .d1(x_input_q0),
    .q1(data1_q1)
);

linear_regression_y #(
    .DataWidth( 32 ),
    .AddressRange( 97 ),
    .AddressWidth( 7 ))
y_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(y_address0),
    .ce0(y_ce0),
    .we0(y_we0),
    .d0(y_d0),
    .q0(y_q0)
);

linear_regressioneOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
linear_regressioneOg_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_639_p0),
    .din1(grp_fu_639_p1),
    .opcode(grp_fu_639_opcode),
    .ce(1'b1),
    .dout(grp_fu_639_p2)
);

linear_regressioneOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
linear_regressioneOg_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_644_p0),
    .din1(grp_fu_644_p1),
    .opcode(grp_fu_644_opcode),
    .ce(1'b1),
    .dout(grp_fu_644_p2)
);

linear_regressionfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
linear_regressionfYi_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(empty_29_reg_581),
    .din1(reg_720),
    .ce(1'b1),
    .dout(grp_fu_651_p2)
);

linear_regressionfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
linear_regressionfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(empty_28_reg_569),
    .din1(reg_726),
    .ce(1'b1),
    .dout(grp_fu_656_p2)
);

linear_regressiong8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
linear_regressiong8j_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_665_p0),
    .din1(grp_fu_665_p1),
    .ce(1'b1),
    .dout(grp_fu_665_p2)
);

linear_regressiong8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
linear_regressiong8j_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_669_p0),
    .din1(grp_fu_669_p1),
    .ce(1'b1),
    .dout(grp_fu_669_p2)
);

linear_regressiong8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
linear_regressiong8j_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_677_p0),
    .din1(grp_fu_677_p1),
    .ce(1'b1),
    .dout(grp_fu_677_p2)
);

linear_regressiong8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
linear_regressiong8j_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_683_p0),
    .din1(grp_fu_683_p1),
    .ce(1'b1),
    .dout(grp_fu_683_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state70) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state70))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state70);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln15_fu_932_p2 == 1'd1))) begin
        empty_22_reg_499 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        empty_22_reg_499 <= grp_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln15_fu_932_p2 == 1'd1))) begin
        empty_23_reg_511 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        empty_23_reg_511 <= grp_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd0))) begin
        empty_25_reg_534 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        empty_25_reg_534 <= grp_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd0))) begin
        empty_26_reg_546 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        empty_26_reg_546 <= grp_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln35_fu_1000_p2 == 1'd1))) begin
        empty_28_reg_569 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        empty_28_reg_569 <= grp_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln35_fu_1000_p2 == 1'd1))) begin
        empty_29_reg_581 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        empty_29_reg_581 <= grp_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln35_fu_1000_p2 == 1'd1))) begin
        empty_30_reg_593 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        empty_30_reg_593 <= grp_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln35_fu_1000_p2 == 1'd1))) begin
        empty_31_reg_605 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        empty_31_reg_605 <= grp_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln15_fu_932_p2 == 1'd1))) begin
        i2_0_reg_523 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        i2_0_reg_523 <= i_2_reg_1257;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd0))) begin
        i3_0_reg_558 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        i3_0_reg_558 <= i_1_reg_1265;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln35_fu_1000_p2 == 1'd1))) begin
        i4_0_reg_617 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        i4_0_reg_617 <= i_3_reg_1304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln14_fu_922_p2 == 1'd1))) begin
        i_0_reg_467 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_0_reg_467 <= i_reg_1227;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        phi_ln11_reg_388 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (ap_phi_mux_phi_ln11_phi_fu_392_p4 == 1'd0))) begin
        phi_ln11_reg_388 <= xor_ln11_fu_806_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 == 1'd0))) begin
        phi_ln12_1_reg_411 <= xor_ln12_fu_844_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        phi_ln12_1_reg_411 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (ap_phi_mux_phi_ln11_phi_fu_392_p4 == 1'd1))) begin
        phi_ln12_reg_399 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln12_fu_863_p2 == 1'd0) & (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 == 1'd1))) begin
        phi_ln12_reg_399 <= add_ln12_reg_1180;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln13_fu_905_p2 == 1'd0))) begin
        phi_ln13_1_reg_445 <= add_ln13_1_fu_885_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        phi_ln13_1_reg_445 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln12_fu_863_p2 == 1'd1) & (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 == 1'd1))) begin
        phi_ln13_reg_422 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state17) & (phi_ln13_reg_422 == 1'd0) & (icmp_ln13_fu_905_p2 == 1'd1))) begin
        phi_ln13_reg_422 <= xor_ln13_reg_1203;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln13_fu_905_p2 == 1'd1) & (phi_ln13_reg_422 == 1'd1))) begin
        phi_ln14_reg_456 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln14_fu_922_p2 == 1'd0))) begin
        phi_ln14_reg_456 <= add_ln14_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd1))) begin
        phi_ln65_reg_628 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln65_fu_1093_p2 == 1'd0))) begin
        phi_ln65_reg_628 <= add_ln65_fu_1099_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_1139 == 1'd0))) begin
        phi_ln8_reg_376 <= add_ln8_reg_1143;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln8_reg_376 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln12_fu_863_p2 == 1'd1) & (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 == 1'd1))) begin
        phi_mul_reg_434 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state17) & (phi_ln13_reg_422 == 1'd0) & (icmp_ln13_fu_905_p2 == 1'd1))) begin
        phi_mul_reg_434 <= add_ln13_3_reg_1198;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln15_fu_932_p2 == 1'd1))) begin
        theta_0_2_reg_489 <= select_ln11_1_reg_1175;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        theta_0_2_reg_489 <= grp_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln15_fu_932_p2 == 1'd1))) begin
        theta_1_2_reg_479 <= select_ln11_reg_1170;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        theta_1_2_reg_479 <= grp_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln12_reg_1180 <= add_ln12_fu_838_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln13_3_reg_1198 <= add_ln13_3_fu_873_p2;
        xor_ln13_reg_1203 <= xor_ln13_fu_879_p2;
        zext_ln13_reg_1193[6 : 0] <= zext_ln13_fu_869_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln8_reg_1143 <= add_ln8_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        data_load_1_reg_1335 <= data_q0;
        data_load_reg_1329 <= data_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_1139 == 1'd0))) begin
        gmem_addr_1_read_reg_1148 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        gmem_addr_reg_1133[29 : 0] <= empty_fu_774_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_1_reg_1265 <= i_1_fu_1006_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21))) begin
        i_2_reg_1257 <= i_2_fu_994_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        i_3_reg_1304 <= i_3_fu_1039_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_reg_1227 <= i_fu_938_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln65_reg_1373 <= icmp_ln65_fu_1093_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln8_reg_1139 <= icmp_ln8_fu_783_p2;
        icmp_ln8_reg_1139_pp0_iter1_reg <= icmp_ln8_reg_1139;
        phi_ln8_reg_376_pp0_iter1_reg <= phi_ln8_reg_376;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input1_reg_1122 <= {{input_r[31:2]}};
        output3_reg_1117 <= {{output_r[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_693 <= data1_q1;
        reg_699 <= data1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_706 <= grp_fu_665_p2;
        reg_713 <= grp_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state38))) begin
        reg_720 <= grp_fu_677_p2;
        reg_726 <= grp_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state51))) begin
        reg_732 <= grp_fu_639_p2;
        reg_738 <= grp_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        select_ln11_1_reg_1175 <= select_ln11_1_fu_820_p3;
        select_ln11_reg_1170 <= select_ln11_fu_812_p3;
        theta_0_0_fu_162 <= select_ln11_1_fu_820_p3;
        theta_1_0_fu_166 <= select_ln11_fu_812_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln65_fu_1093_p2 == 1'd0))) begin
        select_ln65_reg_1382 <= select_ln65_fu_1109_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        y_load_reg_1285 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln15_fu_932_p2 == 1'd0))) begin
        zext_ln17_reg_1232[6 : 0] <= zext_ln17_fu_944_p1[6 : 0];
        zext_ln21_reg_1238[7 : 0] <= zext_ln21_fu_955_p1[7 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_783_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln65_fu_1093_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state70 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state70 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_1139 == 1'd0))) begin
        ap_phi_mux_phi_ln8_phi_fu_380_p4 = add_ln8_reg_1143;
    end else begin
        ap_phi_mux_phi_ln8_phi_fu_380_p4 = phi_ln8_reg_376;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        data1_address0 = zext_ln45_fu_1088_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        data1_address0 = zext_ln38_fu_1028_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        data1_address0 = zext_ln17_reg_1232;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        data1_address0 = zext_ln13_2_fu_900_p1;
    end else begin
        data1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        data1_address1 = zext_ln43_fu_1045_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        data1_address1 = zext_ln37_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        data1_address1 = zext_ln21_reg_1238;
    end else begin
        data1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state17))) begin
        data1_ce0 = 1'b1;
    end else begin
        data1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22))) begin
        data1_ce1 = 1'b1;
    end else begin
        data1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data1_d0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        data1_d0 = 32'd0;
    end else begin
        data1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17))) begin
        data1_we0 = 1'b1;
    end else begin
        data1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data1_we1 = 1'b1;
    end else begin
        data1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        data_address0 = tmp_27_fu_1073_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        data_address0 = zext_ln17_1_fu_968_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        data_address0 = zext_ln12_fu_858_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        data_address1 = zext_ln43_1_fu_1062_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        data_address1 = tmp_25_fu_979_p3;
    end else begin
        data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state15))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state33))) begin
        data_ce1 = 1'b1;
    end else begin
        data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_d0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        data_d0 = 32'd0;
    end else begin
        data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15))) begin
        data_we0 = 1'b1;
    end else begin
        data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_we1 = 1'b1;
    end else begin
        data_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd1))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_1139 == 1'd0))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln65_reg_1373 == 1'd0))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_1139 == 1'd0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln65_reg_1373 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state52))) begin
        grp_fu_639_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_639_opcode = 2'd0;
    end else begin
        grp_fu_639_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_639_p0 = empty_23_reg_511;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_639_p0 = reg_732;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_639_p0 = reg_706;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_639_p0 = empty_31_reg_605;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_639_p0 = empty_26_reg_546;
    end else begin
        grp_fu_639_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_639_p1 = empty_26_reg_546;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_639_p1 = reg_713;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_639_p1 = reg_706;
    end else begin
        grp_fu_639_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state52))) begin
        grp_fu_644_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_644_opcode = 2'd0;
    end else begin
        grp_fu_644_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_644_p0 = empty_22_reg_499;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_644_p0 = reg_738;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_644_p0 = reg_720;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_644_p0 = empty_30_reg_593;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_644_p0 = empty_25_reg_534;
    end else begin
        grp_fu_644_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_644_p1 = empty_25_reg_534;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_644_p1 = reg_726;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_644_p1 = reg_713;
    end else begin
        grp_fu_644_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_665_p0 = reg_706;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_665_p0 = reg_732;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_665_p0 = empty_31_reg_605;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_665_p0 = reg_693;
    end else begin
        grp_fu_665_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_665_p1 = 32'd1008981770;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_665_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_665_p1 = data_load_reg_1329;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_665_p1 = empty_23_reg_511;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_665_p1 = y_load_reg_1285;
    end else begin
        grp_fu_665_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_669_p0 = reg_713;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_669_p0 = reg_738;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_669_p0 = reg_693;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_669_p0 = empty_30_reg_593;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_669_p0 = reg_699;
    end else begin
        grp_fu_669_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_669_p1 = 32'd1008981770;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_669_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_669_p1 = data_load_1_reg_1335;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_669_p1 = empty_22_reg_499;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_669_p1 = y_load_reg_1285;
    end else begin
        grp_fu_669_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_677_p0 = reg_699;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_677_p0 = empty_29_reg_581;
    end else begin
        grp_fu_677_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_677_p1 = data_load_reg_1329;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_677_p1 = empty_23_reg_511;
    end else begin
        grp_fu_677_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_683_p0 = reg_699;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_683_p0 = empty_28_reg_569;
    end else begin
        grp_fu_683_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_683_p1 = data_load_1_reg_1335;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_683_p1 = empty_22_reg_499;
    end else begin
        grp_fu_683_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        x_input_address0 = zext_ln17_fu_944_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        x_input_address0 = zext_ln8_fu_795_p1;
    end else begin
        x_input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        x_input_ce0 = 1'b1;
    end else begin
        x_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        x_input_ce1 = 1'b1;
    end else begin
        x_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln8_reg_1139_pp0_iter1_reg == 1'd0))) begin
        x_input_we0 = 1'b1;
    end else begin
        x_input_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        y_address0 = zext_ln37_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        y_address0 = zext_ln17_reg_1232;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        y_address0 = zext_ln14_fu_917_p1;
    end else begin
        y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        y_d0 = x_input_q1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        y_d0 = 32'd0;
    end else begin
        y_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18))) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln8_fu_783_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln8_fu_783_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (ap_phi_mux_phi_ln11_phi_fu_392_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln12_fu_863_p2 == 1'd1) & (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln12_fu_863_p2 == 1'd0) & (ap_phi_mux_phi_ln12_1_phi_fu_415_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln13_fu_905_p2 == 1'd1) & (phi_ln13_reg_422 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((1'b1 == ap_CS_fsm_state17) & (phi_ln13_reg_422 == 1'd0) & (icmp_ln13_fu_905_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln14_fu_922_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln15_fu_932_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_state21_io) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln32_fu_988_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln35_fu_1000_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln41_fu_1033_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln65_fu_1093_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln65_fu_1093_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_838_p2 = (phi_ln12_reg_399 + 7'd1);

assign add_ln13_1_fu_885_p2 = (phi_ln13_1_reg_445 + 7'd1);

assign add_ln13_2_fu_895_p2 = (zext_ln13_reg_1193 + zext_ln13_1_fu_891_p1);

assign add_ln13_3_fu_873_p2 = ($signed(phi_mul_reg_434) + $signed(7'd97));

assign add_ln14_fu_911_p2 = (phi_ln14_reg_456 + 7'd1);

assign add_ln21_fu_949_p2 = (zext_ln15_fu_928_p1 + 8'd97);

assign add_ln38_fu_1022_p2 = (zext_ln37_1_fu_1018_p1 + 8'd97);

assign add_ln45_fu_1082_p2 = (zext_ln43_2_fu_1050_p1 + 8'd97);

assign add_ln65_fu_1099_p2 = (phi_ln65_reg_628 + 2'd1);

assign add_ln8_fu_789_p2 = (ap_phi_mux_phi_ln8_phi_fu_380_p4 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln8_reg_1139 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln8_reg_1139 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state71_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state71_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln8_reg_1139 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((gmem_AWREADY == 1'b0) & (icmp_ln32_fu_988_p2 == 1'd1));
end

assign ap_block_state70_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state71_io = ((gmem_WREADY == 1'b0) & (icmp_ln65_reg_1373 == 1'd0));
end

assign ap_block_state71_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_phi_ln11_phi_fu_392_p4 = phi_ln11_reg_388;

assign ap_phi_mux_phi_ln12_1_phi_fu_415_p4 = phi_ln12_1_reg_411;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_5_fu_764_p1 = input1_reg_1122;

assign empty_fu_774_p1 = output3_reg_1117;

assign gmem_ARADDR = empty_5_fu_764_p1;

assign i_1_fu_1006_p2 = (i3_0_reg_558 + 7'd1);

assign i_2_fu_994_p2 = (i2_0_reg_523 + 11'd1);

assign i_3_fu_1039_p2 = (i4_0_reg_617 + 7'd1);

assign i_fu_938_p2 = (i_0_reg_467 + 7'd1);

assign icmp_ln12_fu_863_p2 = ((phi_ln12_reg_399 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_905_p2 = ((phi_ln13_1_reg_445 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_922_p2 = ((phi_ln14_reg_456 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_932_p2 = ((i_0_reg_467 == 7'd97) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_988_p2 = ((i2_0_reg_523 == 11'd1500) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_1000_p2 = ((i3_0_reg_558 == 7'd97) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_1033_p2 = ((i4_0_reg_617 == 7'd97) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_1093_p2 = ((phi_ln65_reg_628 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_783_p2 = ((ap_phi_mux_phi_ln8_phi_fu_380_p4 == 8'd194) ? 1'b1 : 1'b0);

assign or_ln18_fu_973_p2 = (tmp_24_fu_960_p3 | 8'd1);

assign or_ln44_fu_1067_p2 = (tmp_26_fu_1054_p3 | 8'd1);

assign select_ln11_1_fu_820_p3 = ((phi_ln11_reg_388[0:0] === 1'b1) ? theta_0_0_fu_162 : 32'd0);

assign select_ln11_fu_812_p3 = ((phi_ln11_reg_388[0:0] === 1'b1) ? 32'd0 : theta_1_0_fu_166);

assign select_ln65_fu_1109_p3 = ((trunc_ln65_fu_1105_p1[0:0] === 1'b1) ? theta_1_2_reg_479 : theta_0_2_reg_489);

assign tmp_24_fu_960_p3 = {{i_0_reg_467}, {1'd0}};

assign tmp_25_fu_979_p3 = {{56'd0}, {or_ln18_fu_973_p2}};

assign tmp_26_fu_1054_p3 = {{i4_0_reg_617}, {1'd0}};

assign tmp_27_fu_1073_p3 = {{56'd0}, {or_ln44_fu_1067_p2}};

assign tmp_fu_850_p3 = {{phi_ln12_reg_399}, {phi_ln12_1_reg_411}};

assign trunc_ln65_fu_1105_p1 = phi_ln65_reg_628[0:0];

assign x_input_address1 = zext_ln21_fu_955_p1;

assign xor_ln11_fu_806_p2 = (phi_ln11_reg_388 ^ 1'd1);

assign xor_ln12_fu_844_p2 = (phi_ln12_1_reg_411 ^ 1'd1);

assign xor_ln13_fu_879_p2 = (phi_ln13_reg_422 ^ 1'd1);

assign zext_ln12_fu_858_p1 = tmp_fu_850_p3;

assign zext_ln13_1_fu_891_p1 = phi_ln13_1_reg_445;

assign zext_ln13_2_fu_900_p1 = add_ln13_2_fu_895_p2;

assign zext_ln13_fu_869_p1 = phi_mul_reg_434;

assign zext_ln14_fu_917_p1 = phi_ln14_reg_456;

assign zext_ln15_fu_928_p1 = i_0_reg_467;

assign zext_ln17_1_fu_968_p1 = tmp_24_fu_960_p3;

assign zext_ln17_fu_944_p1 = i_0_reg_467;

assign zext_ln21_fu_955_p1 = add_ln21_fu_949_p2;

assign zext_ln37_1_fu_1018_p1 = i3_0_reg_558;

assign zext_ln37_fu_1012_p1 = i3_0_reg_558;

assign zext_ln38_fu_1028_p1 = add_ln38_fu_1022_p2;

assign zext_ln43_1_fu_1062_p1 = tmp_26_fu_1054_p3;

assign zext_ln43_2_fu_1050_p1 = i4_0_reg_617;

assign zext_ln43_fu_1045_p1 = i4_0_reg_617;

assign zext_ln45_fu_1088_p1 = add_ln45_fu_1082_p2;

assign zext_ln8_fu_795_p1 = phi_ln8_reg_376_pp0_iter1_reg;

always @ (posedge ap_clk) begin
    gmem_addr_reg_1133[31:30] <= 2'b00;
    zext_ln13_reg_1193[7] <= 1'b0;
    zext_ln17_reg_1232[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_1238[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //linear_regression
